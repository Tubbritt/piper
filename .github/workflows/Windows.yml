name: Build Piper for Windows Desktop

on:
  workflow_dispatch:
  push:
    branches: [main, master]
  pull_request:

jobs:
  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    env:
      ORT_VERSION: 1.17.0

    steps:
    # 1 · Checkout
    - name: Checkout source
      uses: actions/checkout@v4

    # 2 · Install Ninja (optional)
    - name: Install Ninja
      run: choco install ninja -y

    # 3 · eSpeak-NG (shared DLL)
    - name: Clone & Build eSpeak-NG
      run: |
        git clone https://github.com/espeak-ng/espeak-ng.git
        Push-Location espeak-ng
        mkdir build-windows; cd build-windows
        cmake .. `
          -G "Visual Studio 17 2022" `
          -A x64 `
          -DBUILD_SHARED_LIBS=ON `
          -DCMAKE_INSTALL_PREFIX=$PWD/install-windows
        cmake --build . --config Release --target INSTALL
        Pop-Location
        # Export prefix
        "ESPEAK_NG_WINDOWS=$PWD/espeak-ng/build-windows/install-windows" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

    # 4 · ONNX Runtime (Windows x64)
    - name: Download ONNX Runtime (Windows x64)
      run: |
        New-Item -ItemType Directory third_party | Out-Null
        Push-Location third_party
        Invoke-WebRequest -Uri "https://github.com/microsoft/onnxruntime/releases/download/v$Env:ORT_VERSION/onnxruntime-win-x64-$Env:ORT_VERSION.zip" -OutFile ort.zip
        Expand-Archive ort.zip -DestinationPath ort
        Pop-Location
        "ORT_WINDOWS_DIR=$PWD/third_party/ort" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

    # 5 · fmt (static)
    - name: Clone & Build fmt
      run: |
        git clone --depth 1 --branch 10.2.1 https://github.com/fmtlib/fmt.git
        Push-Location fmt
        mkdir build-windows; cd build-windows
        cmake .. `
          -G "Visual Studio 17 2022" `
          -A x64 `
          -DBUILD_SHARED_LIBS=OFF `
          -DCMAKE_INSTALL_PREFIX=$PWD/install-windows
        cmake --build . --config Release --target INSTALL
        Pop-Location
        "FMT_WINDOWS=$PWD/fmt/build-windows/install-windows" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

    # 6 · spdlog (static)
    - name: Clone & Build spdlog
      run: |
        git clone --depth 1 --branch v1.13.0 https://github.com/gabime/spdlog.git
        Push-Location spdlog
        mkdir build-windows; cd build-windows
        cmake .. `
          -G "Visual Studio 17 2022" `
          -A x64 `
          -DBUILD_SHARED_LIBS=OFF `
          -DCMAKE_INSTALL_PREFIX=$PWD/install-windows
        cmake --build . --config Release --target INSTALL
        Pop-Location
        "SPDLOG_WINDOWS=$PWD/spdlog/build-windows/install-windows" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

    # 7 · piper-phonemize (shared DLL)
    - name: Clone & Build piper-phonemize
      run: |
        git clone https://github.com/rhasspy/piper-phonemize.git
        Push-Location piper-phonemize
        mkdir build-windows; cd build-windows

        # Export CMake search paths so espeak-ng & onnxruntime headers/libs are found
        $env:CMAKE_PREFIX_PATH = "$Env:ESPEAK_NG_WINDOWS;$Env:ORT_WINDOWS_DIR"
        $env:CMAKE_INCLUDE_PATH = "$Env:ESPEAK_NG_WINDOWS/include;$Env:ORT_WINDOWS_DIR/include"
        $env:CMAKE_LIBRARY_PATH = "$Env:ESPEAK_NG_WINDOWS/lib;$Env:ORT_WINDOWS_DIR/lib"

        cmake .. `
          -G "Visual Studio 17 2022" `
          -A x64 `
          -DBUILD_SHARED_LIBS=ON `
          -DESPEAK_NG_DIR="$Env:ESPEAK_NG_WINDOWS" `
          -DONNXRUNTIME_DIR="$Env:ORT_WINDOWS_DIR" `
          -DCMAKE_INSTALL_PREFIX=$PWD/install-windows
        cmake --build . --config Release --target INSTALL

        # Export prefix after install
        "PIPER_PHONEMIZE_WINDOWS=$PWD/install-windows" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
        Pop-Location

    # 8 · Piper core (shared DLL)
    - name: Build Piper core
      run: |
        mkdir build-windows
        Push-Location build-windows

        # Inherit same search paths for core
        $env:CMAKE_PREFIX_PATH = "$Env:FMT_WINDOWS;$Env:SPDLOG_WINDOWS;$Env:ESPEAK_NG_WINDOWS;$Env:ORT_WINDOWS_DIR;$Env:PIPER_PHONEMIZE_WINDOWS"
        $env:CMAKE_INCLUDE_PATH = "$Env:FMT_WINDOWS/include;$Env:SPDLOG_WINDOWS/include;$Env:ESPEAK_NG_WINDOWS/include;$Env:ORT_WINDOWS_DIR/include;$Env:PIPER_PHONEMIZE_WINDOWS/include"
        $env:CMAKE_LIBRARY_PATH = "$Env:FMT_WINDOWS/lib;$Env:SPDLOG_WINDOWS/lib;$Env:ESPEAK_NG_WINDOWS/lib;$Env:ORT_WINDOWS_DIR/lib;$Env:PIPER_PHONEMIZE_WINDOWS/lib"

        cmake .. `
          -G "Visual Studio 17 2022" `
          -A x64 `
          -DBUILD_SHARED_LIBS=ON `
          -DCMAKE_INSTALL_PREFIX=$PWD/install-windows
        cmake --build . --config Release --target INSTALL
        Pop-Location

    # 9 · Upload the four DLLs
    - name: Upload Windows libraries
      uses: actions/upload-artifact@v4
      with:
        name: piper-windows-libs
        path: |
          espeak-ng/build-windows/install-windows/bin/espeak-ng.dll
          piper-phonemize/build-windows/install-windows/bin/piper_phonemize.dll
          build-windows/install-windows/bin/piper.dll
          third_party/ort/bin/onnxruntime.dll
