name: Build Piper for Windows Desktop

on:
  workflow_dispatch:
  push:
    branches: [main, master]
  pull_request:

jobs:
  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    env:
      ORT_VERSION: 1.17.0

    steps:
    # 1 · Checkout your patched Piper fork
    - name: Checkout source
      uses: actions/checkout@v4

    # 2 · Install Ninja (CMake is preinstalled on windows-latest)
    - name: Install Ninja
      run: choco install ninja -y

    # 3 · eSpeak-NG (shared DLL)
    - name: Clone eSpeak-NG
      run: git clone https://github.com/espeak-ng/espeak-ng.git

    - name: Build eSpeak-NG
      run: |
        cd espeak-ng
        mkdir -p build-windows && cd build-windows
        cmake .. \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_INSTALL_PREFIX=$PWD/install-windows
        ninja
        ninja install
        echo "ESPEAK_NG_WINDOWS=$PWD/install-windows" >> $GITHUB_ENV

    # 4 · ONNX Runtime (Windows x64)
    - name: Download ONNX Runtime (Windows x64)
      run: |
        mkdir -p third_party && cd third_party
        curl -L -o ort.zip \
          "https://github.com/microsoft/onnxruntime/releases/download/v${ORT_VERSION}/onnxruntime-win-x64-${ORT_VERSION}.zip"
        unzip -q ort.zip -d ort
        echo "ORT_WINDOWS_DIR=$PWD/ort" >> $GITHUB_ENV

    # 5 · fmt (static)
    - name: Clone fmt
      run: git clone --depth 1 --branch 10.2.1 https://github.com/fmtlib/fmt.git

    - name: Build fmt
      run: |
        cd fmt
        mkdir -p build-windows && cd build-windows
        cmake .. \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX=$PWD/install-windows
        ninja
        ninja install
        echo "FMT_WINDOWS=$PWD/install-windows" >> $GITHUB_ENV

    # 6 · spdlog (static)
    - name: Clone spdlog
      run: git clone --depth 1 --branch v1.13.0 https://github.com/gabime/spdlog.git

    - name: Build spdlog
      run: |
        cd spdlog
        mkdir -p build-windows && cd build-windows
        cmake .. \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX=$PWD/install-windows
        ninja
        ninja install
        echo "SPDLOG_WINDOWS=$PWD/install-windows" >> $GITHUB_ENV

    # 7 · piper-phonemize (shared DLL)
    - name: Clone piper-phonemize
      run: git clone https://github.com/rhasspy/piper-phonemize.git

    - name: Build piper-phonemize
      run: |
        cd piper-phonemize
        mkdir -p build-windows && cd build-windows
        cmake .. \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=ON \
          -DESPEAK_NG_DIR=$ESPEAK_NG_WINDOWS \
          -Donnxruntime_DIR=$ORT_WINDOWS_DIR \
          -DCMAKE_INSTALL_PREFIX=$PWD/install-windows
        ninja
        ninja install
        echo "PIPER_PHONEMIZE_WINDOWS=$PWD/install-windows" >> $GITHUB_ENV

    # 8 · Piper core (shared DLL)
    - name: Build Piper
      run: |
        mkdir -p build-windows && cd build-windows
        cmake .. \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_PREFIX_PATH="${FMT_WINDOWS};${SPDLOG_WINDOWS};${ESPEAK_NG_WINDOWS};${ORT_WINDOWS_DIR};${PIPER_PHONEMIZE_WINDOWS}" \
          -DCMAKE_INSTALL_PREFIX=$PWD/install-windows
        ninja
        ninja install

    # 9 · Upload the four DLLs as an artifact
    - name: Upload Windows libraries
      uses: actions/upload-artifact@v4
      with:
        name: piper-windows-libs
        path: |
          espeak-ng/build-windows/install-windows/lib/espeak-ng.dll
          piper-phonemize/build-windows/install-windows/lib/piper_phonemize.dll
          build-windows/install-windows/lib/piper.dll
          third_party/ort/bin/onnxruntime.dll
