# A more robust version of your workflow with cleaner paths.

name: Build Piper for Unity Android

on:
  workflow_dispatch:
  push:
    branches: [main, master]
  pull_request:

jobs:
  build-android:
    runs-on: ubuntu-latest

    env:
      ANDROID_ABI: arm64-v8a
      ANDROID_PLATFORM: android-21
      ANDROID_STL: c++_shared
      ORT_VERSION: 1.17.0
      # Define build and install directories for consistency
      BUILD_DIR: ${{ github.workspace }}/_build
      INSTALL_DIR: ${{ github.workspace }}/_install

    steps:
    # 1. Checkout
    - name: Checkout source
      uses: actions/checkout@v4

    # 2. Host Tools
    - name: Install prerequisites
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build autoconf automake libtool pkg-config cmake curl unzip

    # 3. Android NDK
    - name: Set up Android NDK
      id: ndk
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r26d

    - name: Export Android env vars
      run: echo "ANDROID_NDK_HOME=${{ steps.ndk.outputs.ndk-path }}" >> $GITHUB_ENV

    # 4. Patch CMakeLists
    - name: Patch CMakeLists for Android threading
      run: |
        if ! grep -q "find_package(Threads" CMakeLists.txt; then
          sed -i '/^[[:space:]]*project(/a find_package(Threads REQUIRED)' CMakeLists.txt
        fi
        sed -i -E 's/([[:space:][:punct:]]|^)pthread([[:space:][:punct:]]|$)/ Threads::Threads /g' CMakeLists.txt || true

    # 5. eSpeak-NG
    - name: Clone eSpeak-NG
      uses: actions/checkout@v4
      with:
        repository: espeak-ng/espeak-ng
        path: espeak-ng

    - name: Build eSpeak-NG
      run: |
        cmake -S espeak-ng -B ${{ env.BUILD_DIR }}/espeak-ng \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=$ANDROID_ABI \
          -DANDROID_PLATFORM=$ANDROID_PLATFORM \
          -DANDROID_STL=$ANDROID_STL \
          -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }}/espeak-ng \
          -G Ninja
        cmake --build ${{ env.BUILD_DIR }}/espeak-ng
        cmake --install ${{ env.BUILD_DIR }}/espeak-ng
        echo "ESPEAK_NG_ANDROID=${{ env.INSTALL_DIR }}/espeak-ng" >> $GITHUB_ENV

    # 6. ONNX Runtime
    - name: Download ONNX Runtime (Android arm64)
      run: |
        mkdir -p ${{ env.INSTALL_DIR }}/onnxruntime-android/lib
        curl -L -o ort.aar "https://repo1.maven.org/maven2/com/microsoft/onnxruntime/onnxruntime-android/${ORT_VERSION}/onnxruntime-android-${ORT_VERSION}.aar"
        unzip -q ort.aar -d ort
        cp -r ort/headers/*  ${{ env.INSTALL_DIR }}/onnxruntime-android/include/
        cp    ort/jni/arm64-v8a/libonnxruntime.so ${{ env.INSTALL_DIR }}/onnxruntime-android/lib/
        echo "ORT_ANDROID_DIR=${{ env.INSTALL_DIR }}/onnxruntime-android" >> $GITHUB_ENV

    # 7. fmt
    - name: Clone fmt
      uses: actions/checkout@v4
      with:
        repository: fmtlib/fmt
        path: fmt
        ref: 10.2.1

    - name: Build fmt
      run: |
        cmake -S fmt -B ${{ env.BUILD_DIR }}/fmt \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=$ANDROID_ABI \
          -DANDROID_PLATFORM=$ANDROID_PLATFORM \
          -DANDROID_STL=$ANDROID_STL \
          -DBUILD_SHARED_LIBS=OFF -DFMT_TEST=OFF \
          -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }}/fmt \
          -G Ninja
        cmake --build ${{ env.BUILD_DIR }}/fmt
        cmake --install ${{ env.BUILD_DIR }}/fmt
        echo "FMT_ANDROID=${{ env.INSTALL_DIR }}/fmt" >> $GITHUB_ENV

    # 8. spdlog
    - name: Clone spdlog
      uses: actions/checkout@v4
      with:
        repository: gabime/spdlog
        path: spdlog
        ref: v1.13.0

    - name: Build spdlog
      run: |
        cmake -S spdlog -B ${{ env.BUILD_DIR }}/spdlog \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=$ANDROID_ABI \
          -DANDROID_PLATFORM=$ANDROID_PLATFORM \
          -DANDROID_STL=$ANDROID_STL \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }}/spdlog \
          -G Ninja
        cmake --build ${{ env.BUILD_DIR }}/spdlog
        cmake --install ${{ env.BUILD_DIR }}/spdlog
        echo "SPDLOG_ANDROID=${{ env.INSTALL_DIR }}/spdlog" >> $GITHUB_ENV

    # 9. piper-phonemize
    - name: Clone piper-phonemize
      uses: actions/checkout@v4
      with:
        repository: rhasspy/piper-phonemize
        path: piper-phonemize

    - name: Build piper-phonemize
      run: |
        cmake -S piper-phonemize -B ${{ env.BUILD_DIR }}/piper-phonemize \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=$ANDROID_ABI \
          -DANDROID_PLATFORM=$ANDROID_PLATFORM \
          -DANDROID_STL=$ANDROID_STL \
          -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }}/piper-phonemize \
          -Despeak-ng_DIR=${{ env.ESPEAK_NG_ANDROID }}/lib/cmake/espeak-ng \
          -Donnxruntime_DIR=${{ env.ORT_ANDROID_DIR }} \
          -G Ninja
        cmake --build ${{ env.BUILD_DIR }}/piper-phonemize
        cmake --install ${{ env.BUILD_DIR }}/piper-phonemize
        echo "PIPER_PHONEMIZE_ANDROID=${{ env.INSTALL_DIR }}/piper-phonemize" >> $GITHUB_ENV

    # 10. Copy eSpeak-NG data
    - name: Copy eSpeak-NG data
      run: |
        mkdir -p ${{ env.INSTALL_DIR }}/piper/share
        cp -r ${{ env.ESPEAK_NG_ANDROID }}/share/espeak-ng-data ${{ env.INSTALL_DIR }}/piper/share/

    # 11. Strip newline in VERSION
    - name: Fix VERSION file
      run: tr -d '\n' < VERSION > VERSION.tmp && mv VERSION.tmp VERSION

    # 12. Piper core (The Fix!)
    - name: Build Piper
      run: |
        cmake -S . -B ${{ env.BUILD_DIR }}/piper \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=$ANDROID_ABI \
          -DANDROID_PLATFORM=$ANDROID_PLATFORM \
          -DANDROID_STL=$ANDROID_STL \
          -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
          -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }}/piper \
          -DCMAKE_PREFIX_PATH="${{ env.FMT_ANDROID }};${{ env.SPDLOG_ANDROID }};${{ env.PIPER_PHONEMIZE_ANDROID }};${{ env.ESPEAK_NG_ANDROID }};${{ env.ORT_ANDROID_DIR }}" \
          -DBUILD_TESTING=OFF \
          -DPIPER_BUILD_EXE=OFF \
          -G Ninja
        cmake --build ${{ env.BUILD_DIR }}/piper
        cmake --install ${{ env.BUILD_DIR }}/piper

    # 13. Upload artifacts with clean paths
    - name: Upload Android libraries
      uses: actions/upload-artifact@v4
      with:
        name: piper-android-libs-${{ env.ANDROID_ABI }}
        path: |
          ${{ env.INSTALL_DIR }}/piper/lib/libpiper.so
          ${{ env.INSTALL_DIR }}/piper-phonemize/lib/libpiper_phonemize.so
          ${{ env.INSTALL_DIR }}/espeak-ng/lib/libespeak-ng.so
          ${{ env.INSTALL_DIR }}/piper/share/espeak-ng-data