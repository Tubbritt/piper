name: Build Piper for Unity Android

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master
  pull_request:

jobs:
  build-android:
    runs-on: ubuntu-latest
    env:
      ANDROID_ABI: arm64-v8a
      ANDROID_PLATFORM: android-21
      ANDROID_STL: c++_shared
      ORT_VERSION: 1.17.0

    steps:
      # 1 · Checkout
      - name: Checkout source
        uses: actions/checkout@v4

      # 2 · Host-side build tools
      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build autoconf automake libtool \
            pkg-config cmake curl unzip

      # 3 · Android NDK r26d
      - name: Set up Android NDK
        id: ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d

      - name: Export Android env vars
        run: |
          echo "ANDROID_NDK_HOME=${{ steps.ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          echo "PATH=${{ steps.ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH" >> $GITHUB_ENV

      # 4 · eSpeak-NG (shared)
      - name: Clone eSpeak-NG
        run: |
          git clone --depth 1 https://github.com/espeak-ng/espeak-ng.git

      - name: Build eSpeak-NG
        run: |
          cd espeak-ng
          mkdir -p build-android && cd build-android
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=$ANDROID_ABI \
            -DANDROID_PLATFORM=$ANDROID_PLATFORM \
            -DANDROID_STL=$ANDROID_STL \
            -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -G Ninja
          ninja
          cmake --install . --prefix install-android
          echo "ESPEAK_NG_ANDROID=${{ github.workspace }}/espeak-ng/build-android/install-android" >> $GITHUB_ENV

      # 5 · ONNX Runtime
      - name: Download and prepare ONNX Runtime
        run: |
          mkdir -p third_party && cd third_party
          curl -L -o ort.aar \
            "https://repo1.maven.org/maven2/com/microsoft/onnxruntime/onnxruntime-android/${ORT_VERSION}/onnxruntime-android-${ORT_VERSION}.aar"
          unzip -q ort.aar -d ort
          mkdir -p onnxruntime-android/include onnxruntime-android/lib
          cp -r ort/headers/* onnxruntime-android/include/
          cp ort/jni/${ANDROID_ABI}/libonnxruntime.so onnxruntime-android/lib/
          echo "ORT_ANDROID_DIR=${{ github.workspace }}/third_party/onnxruntime-android" >> $GITHUB_ENV

      # 6 · fmt (static)
      - name: Clone fmt
        run: |
          git clone --depth 1 --branch 10.2.1 https://github.com/fmtlib/fmt.git

      - name: Build fmt
        run: |
          cd fmt
          mkdir -p build-android && cd build-android
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=$ANDROID_ABI \
            -DANDROID_PLATFORM=$ANDROID_PLATFORM \
            -DANDROID_STL=$ANDROID_STL \
            -DBUILD_SHARED_LIBS=OFF \
            -DFMT_TEST=OFF \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -G Ninja
          ninja
          cmake --install . --prefix install-android
          echo "FMT_ANDROID=${{ github.workspace }}/fmt/build-android/install-android" >> $GITHUB_ENV

      # 7 · spdlog (static)
      - name: Clone spdlog
        run: |
          git clone --depth 1 --branch v1.13.0 https://github.com/gabime/spdlog.git

      - name: Build spdlog
        run: |
          cd spdlog
          mkdir -p build-android && cd build-android
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=$ANDROID_ABI \
            -DANDROID_PLATFORM=$ANDROID_PLATFORM \
            -DANDROID_STL=$ANDROID_STL \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -G Ninja
          ninja
          cmake --install . --prefix install-android
          echo "SPDLOG_ANDROID=${{ github.workspace }}/spdlog/build-android/install-android" >> $GITHUB_ENV

      # 8 · piper-phonemize (shared)
      - name: Clone piper-phonemize
        run: |
          git clone --depth 1 https://github.com/rhasspy/piper-phonemize.git

      - name: Build piper-phonemize
        run: |
          cd piper-phonemize
          mkdir -p build-android && cd build-android
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=$ANDROID_ABI \
            -DANDROID_PLATFORM=$ANDROID_PLATFORM \
            -DANDROID_STL=$ANDROID_STL \
            -DBUILD_SHARED_LIBS=ON \
            -DBUILD_TESTING=OFF \
            -DESPEAK_NG_DIR=$ESPEAK_NG_ANDROID \
            -DONNXRUNTIME_DIR=$ORT_ANDROID_DIR \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DCMAKE_INSTALL_PREFIX=install-android \
            -G Ninja
          ninja
          cmake --install .
          echo "PIPER_PHONEMIZE_ANDROID=${{ github.workspace }}/piper-phonemize/build-android/install-android" >> $GITHUB_ENV

      # 9 · Patch Piper CMake (simple echo approach)
      - name: Patch Piper CMake
        run: |
          sed -i '/^[[:space:]]*project(/a \
find_package(Threads REQUIRED)\nfind_package(fmt REQUIRED)\nfind_package(spdlog REQUIRED)' CMakeLists.txt
          sed -i -E 's/([[:space:][:punct:]]|^)pthread([[:space:][:punct:]]|$)/ Threads::Threads /g' CMakeLists.txt || true
          echo 'add_library(onnxruntime SHARED IMPORTED)' >> CMakeLists.txt
          echo 'set_target_properties(onnxruntime PROPERTIES IMPORTED_LOCATION "${ORT_ANDROID_DIR}/lib/libonnxruntime.so")' >> CMakeLists.txt
          echo 'target_include_directories(onnxruntime INTERFACE "${ORT_ANDROID_DIR}/include")' >> CMakeLists.txt
          echo '' >> CMakeLists.txt
          echo 'add_library(piperlib SHARED src/cpp/piper.cpp)' >> CMakeLists.txt
          echo 'set_target_properties(piperlib PROPERTIES POSITION_INDEPENDENT_CODE ON)' >> CMakeLists.txt
          echo 'target_include_directories(piperlib PRIVATE ${ESPEAK_NG_ANDROID}/include)' >> CMakeLists.txt
          echo 'target_link_directories(piperlib PRIVATE ${ESPEAK_NG_ANDROID}/lib)' >> CMakeLists.txt
          echo 'target_link_libraries(piperlib PRIVATE espeak-ng piper_phonemize onnxruntime fmt::fmt spdlog::spdlog Threads::Threads)' >> CMakeLists.txt
          echo 'install(TARGETS piperlib LIBRARY DESTINATION lib)' >> CMakeLists.txt

      # 10 · Strip newline in VERSION
      - name: Fix VERSION file
        run: |
          tr -d '\n' < VERSION > VERSION.tmp
          mv VERSION.tmp VERSION

      # 11 · Piper core (exec + shared)
      - name: Build Piper
        run: |
          mkdir -p build-android && cd build-android
          INSTALL_DIR=$PWD/install-android
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=$ANDROID_ABI \
            -DANDROID_PLATFORM=$ANDROID_PLATFORM \
            -DANDROID_STL=$ANDROID_STL \
            -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DBUILD_TESTING=OFF \
            -Dfmt_DIR=${FMT_ANDROID}/lib/cmake/fmt \
            -DFMT_DIR=${FMT_ANDROID} \
            -Dspdlog_DIR=${SPDLOG_ANDROID}/lib/cmake/spdlog \
            -DSPDLOG_DIR=${SPDLOG_ANDROID} \
            -DPIPER_PHONEMIZE_DIR=${PIPER_PHONEMIZE_ANDROID} \
            -DCMAKE_PREFIX_PATH="$FMT_ANDROID;$SPDLOG_ANDROID;$PIPER_PHONEMIZE_ANDROID;$ESPEAK_NG_ANDROID;$ORT_ANDROID_DIR" \
            -G Ninja
          ninja
          cmake --install .

      # 12 · Copy eSpeak-NG data
      - name: Copy eSpeak-NG data
        run: |
          FINAL_INSTALL_DIR="${{ github.workspace }}/build-android/install-android"
          mkdir -p "${FINAL_INSTALL_DIR}/share"
          cp -r "${{ github.workspace }}/espeak-ng/espeak-ng-data" "${FINAL_INSTALL_DIR}/share/"

      # 13 · Upload Unity-ready outputs
      - name: Upload Android libraries and data
        uses: actions/upload-artifact@v4
        with:
          name: piper-android-libs
          path: |
            build-android/install-android/lib/libpiperlib.so
            piper-phonemize/build-android/install-android/lib/libpiper_phonemize.so
            espeak-ng/build-android/install-android/lib/libespeak-ng.so
            third_party/onnxruntime-android/lib/libonnxruntime.so
            build-android/install-android/share/espeak-ng-data/
