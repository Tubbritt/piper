name: Build Piper for Unity Android

on:
  workflow_dispatch:
  push:
    branches: [main, master]
  pull_request:

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Piper
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build autoconf automake \
            libtool pkg-config cmake curl unzip git

      - name: Set up Android NDK
        id: ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d

      - name: Clone espeak-ng
        run: git clone https://github.com/espeak-ng/espeak-ng.git

      - name: Build espeak-ng for Android (arm64)
        run: |
          export ANDROID_NDK_HOME=${{ steps.ndk.outputs.ndk-path }}
          cd espeak-ng
          mkdir build-android && cd build-android
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-21 \
            -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_FLAGS_RELEASE="-s -fvisibility=hidden" \
            -DCMAKE_CXX_FLAGS_RELEASE="-s -fvisibility=hidden" \
            -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--no-undefined" \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DCMAKE_INSTALL_PREFIX=${PWD}/install-android/usr/local \
            -G Ninja
          ninja
          ninja install
          # just to verify
          ls -lh install-android/usr/local/lib
          ls -lh install-android/usr/local/include

      - name: Download ONNX Runtime for Android via AAR
        run: |
          ORT_VERSION=1.17.0
          mkdir -p third_party/onnxruntime-android
          cd third_party/onnxruntime-android
          AAR_URL="https://repo1.maven.org/maven2/com/microsoft/onnxruntime/onnxruntime-android/${ORT_VERSION}/onnxruntime-android-${ORT_VERSION}.aar"
          echo "Downloading ONNX Runtime AAR from $AAR_URL"
          curl -L --fail -o onnxruntime.aar "$AAR_URL"
          unzip onnxruntime.aar

          # libonnxruntime.so for arm64-v8a
          mkdir -p lib
          cp jni/arm64-v8a/libonnxruntime.so lib/

          # headers: first see if AAR bundled any, else clone just to get them
          if [ -d jni/include ]; then
            mkdir -p include && cp -r jni/include/* include/
          else
            echo "No headers in AAR; pulling in ONNX Runtime headers from source..."
            git clone --depth 1 --branch v${ORT_VERSION} https://github.com/microsoft/onnxruntime.git onnxrt_src
            mkdir -p include && cp -r onnxrt_src/include/onnxruntime include/
          fi

          # export for subsequent steps
          echo "ONNXRUNTIME_DIR=$(pwd)" >> $GITHUB_ENV
          cd ../../
          ls -R third_party/onnxruntime-android | head

      - name: Clone piper-phonemize
        run: git clone https://github.com/rhasspy/piper-phonemize.git

      - name: Build piper-phonemize for Android
        run: |
          export ANDROID_NDK_HOME=${{ steps.ndk.outputs.ndk-path }}
          cd piper-phonemize
          mkdir build-android && cd build-android
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-21 \
            -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DESPEAK_NG_LIBRARY=../../espeak-ng/build-android/install-android/usr/local/lib/libespeak-ng.so \
            -DESPEAK_NG_INCLUDE_DIR=../../espeak-ng/build-android/install-android/usr/local/include \
            -DONNXRUNTIME_DIR=$ONNXRUNTIME_DIR \
            -DCMAKE_C_FLAGS_RELEASE="-s -fvisibility=hidden" \
            -DCMAKE_CXX_FLAGS_RELEASE="-s -fvisibility=hidden" \
            -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--no-undefined" \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -G Ninja
          ninja
          ls -lh libpiper_phonemize.so

      - name: Build Piper for Android
        run: |
          export ANDROID_NDK_HOME=${{ steps.ndk.outputs.ndk-path }}
          mkdir build-android && cd build-android
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-21 \
            -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -Dphonemize_DIR=../piper-phonemize/build-android \
            -DONNXRUNTIME_DIR=$ONNXRUNTIME_DIR \
            -DCMAKE_C_FLAGS_RELEASE="-s -fvisibility=hidden" \
            -DCMAKE_CXX_FLAGS_RELEASE="-s -fvisibility=hidden" \
            -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--no-undefined" \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -G Ninja
          ninja
          ls -lh libpiper.so

      - name: Upload Piper Android .so
        uses: actions/upload-artifact@v4
        with:
          name: piper-android-so
          path: build-android/libpiper.so

      - name: Upload piper-phonemize Android .so
        uses: actions/upload-artifact@v4
        with:
          name: piper-phonemize-android-so
          path: piper-phonemize/build-android/libpiper_phonemize.so

      - name: Upload espeak-ng Android .so
        uses: actions/upload-artifact@v4
        with:
          name: espeak-ng-android-so
          path: espeak-ng/build-android/install-android/usr/local/lib/libespeak-ng.so
